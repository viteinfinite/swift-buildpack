#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

if [[ "${BP_DEBUG}X" != "X" ]]; then
  set -x # show all commands
fi

BUILD_DIR=$1
CACHE_DIR=$2

DEFAULT_SWIFT_VERSION=DEVELOPMENT-SNAPSHOT-2016-03-01-a
CLANG_VERSION=3.7.0

if [ -f $BUILD_DIR/.swift-version ]; then
  # Take any pinned Swift version, stripping any redundant `swift-` prefix if present
  SWIFT_VERSION=$(cat $BUILD_DIR/.swift-version | sed -e "s/swift-//")
else
  SWIFT_VERSION=$DEFAULT_SWIFT_VERSION
fi
SWIFT_NAME_VERSION="swift-${SWIFT_VERSION}"
CLANG_NAME_VERSION="clang-${CLANG_VERSION}"

compile_buildpack_dir=$(cd $(dirname $0); cd ..; pwd)
compile_buildpack_bin=$compile_buildpack_dir/bin
$compile_buildpack_dir/compile-extensions/bin/check_stack_support

# Load some convenience functions like status(), echo(), and indent()
source $compile_buildpack_dir/bin/common.sh

BUILDPACK_PATH=$compile_buildpack_dir source $compile_buildpack_dir/compile-extensions/lib/common

mkdir -p $CACHE_DIR
cd $CACHE_DIR

# download and unpack swift
if [[ ! -d "$CACHE_DIR/$SWIFT_NAME_VERSION" ]]; then
  status "Installing Swift $SWIFT_VERSION"
  mkdir -p $SWIFT_NAME_VERSION
  dependency=$($compile_buildpack_dir/compile-extensions/bin/download_dependency $SWIFT_NAME_VERSION.tar.gz /tmp)
  echo "Downloaded Swift" | indent
  tar xz -C $SWIFT_NAME_VERSION -f $dependency
fi
SWIFT_PATH=$CACHE_DIR/$(echo $SWIFT_NAME_VERSION/swift*)

# download and unpack clang
if [[ ! -d "$CACHE_DIR/$CLANG_NAME_VERSION" ]]; then
  status "Installing Clang $CLANG_VERSION"
  mkdir -p $CLANG_NAME_VERSION
  dependency=$($compile_buildpack_dir/compile-extensions/bin/download_dependency $CLANG_NAME_VERSION.tar.xz /tmp)
  echo "Downloaded Clang" | indent
  echo $dependency | xz -d -c --files | tar x -C $CLANG_NAME_VERSION &> /dev/null
fi
CLANG_PATH=$CACHE_DIR/$(echo $CLANG_NAME_VERSION/clang*)

export PATH="$SWIFT_PATH/usr/bin:$CLANG_PATH/bin:$PATH"

status "Installing libdispatch"
echo "Detectinc aclocal" | indent
echo "aclocal is $(which aclocal)" | indent
git clone https://github.com/apple/swift-corelibs-libdispatch.git && cd swift-corelibs-libdispatch && git submodule init && git submodule update && sh ./autogen.sh && ./configure --with-swift-toolchain=$SWIFT_PATH/usr --prefix=$SWIFT_PATH/usr && make && make install
echo "Installed libdispatch" | indent

cd $BUILD_DIR
status "Building Package"
swift build -Xcc -fblocks --configuration release | indent

# These should be statically linked, seems a swift bug
status "Copying dynamic libraries"
mkdir -p $BUILD_DIR/.swift-lib
cp $SWIFT_PATH/usr/lib/swift/linux/*.so $BUILD_DIR/.swift-lib

status "Copying binaries to 'bin'"
mkdir -p $BUILD_DIR/.swift-bin
find $BUILD_DIR/.build/release -type f -perm /a+x -exec cp {} $BUILD_DIR/.swift-bin \;

status "Cleaning up build files"
rm -rf $BUILD_DIR/.build

# Setup application environment
PROFILE_PATH="$BUILD_DIR/.profile.d/swift.sh"
mkdir -p $BUILD_DIR/.profile.d
set-env() {
  echo "export $1=$2" >> $PROFILE_PATH
}
set-env PATH '$HOME/.swift-bin:$PATH'
set-env LD_LIBRARY_PATH '$HOME/.swift-lib'
